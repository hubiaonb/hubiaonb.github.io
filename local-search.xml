<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>PHP学习笔记</title>
    <link href="/2024/05/09/phpxuexi/"/>
    <url>/2024/05/09/phpxuexi/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PHP学习笔记📒"><a href="#PHP学习笔记📒" class="headerlink" title="PHP学习笔记📒"></a>PHP学习笔记📒</h1><h2 id="1️⃣系统函数库"><a href="#1️⃣系统函数库" class="headerlink" title="1️⃣系统函数库"></a>1️⃣系统函数库</h2><h3 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h3><h5 id="strlen函数（获取字符长度）"><a href="#strlen函数（获取字符长度）" class="headerlink" title="strlen函数（获取字符长度）"></a>strlen函数（获取字符长度）</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$str1</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-variable">$str2</span> = <span class="hljs-string">&quot;你好&quot;</span>;<br><span class="hljs-variable">$str3</span> = <span class="hljs-string">&quot;ab&quot;</span>;<br><span class="hljs-comment">// strlen函数</span><br><span class="hljs-comment">// 用于获取字符长度</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str1</span>),<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str2</span>),<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str3</span>);<br></code></pre></td></tr></table></figure><h5 id="字符串大小写转换"><a href="#字符串大小写转换" class="headerlink" title="字符串大小写转换"></a>字符串大小写转换</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$str1</span> = <span class="hljs-string">&quot;php&quot;</span>;<br><span class="hljs-variable">$str2</span> = <span class="hljs-string">&quot;HI&quot;</span>;<br><span class="hljs-comment">// strtoupper将小写字符转换为大写</span><br><span class="hljs-comment">// strtolower 将大写字符转换为小写</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">strtoupper</span>(<span class="hljs-variable">$str1</span>),<span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$str2</span>);<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$str1</span> = <span class="hljs-string">&quot;hi world&quot;</span>;<br><span class="hljs-variable">$str2</span> = <span class="hljs-string">&quot;hi world&quot;</span>;<br><span class="hljs-comment">// ucfirst函数 将句子首字母转换为大写</span><br><span class="hljs-comment">// ucwords函数 将每个单词的首字母转换为大写</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">ucfirst</span>(<span class="hljs-variable">$str1</span>),<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>,<span class="hljs-title function_ invoke__">ucwords</span>(<span class="hljs-variable">$str2</span>);<br><br><span class="hljs-comment">/*结果：「</span><br><span class="hljs-comment">    Hi world</span><br><span class="hljs-comment">    Hi World</span><br><span class="hljs-comment">」*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go语言利用for循环写一个100以内偶数相加</title>
    <link href="/2024/04/21/go-100oshuxaingjia/"/>
    <url>/2024/04/21/go-100oshuxaingjia/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="go语言利用for循环写一个100以内偶数相加"><a href="#go语言利用for循环写一个100以内偶数相加" class="headerlink" title="go语言利用for循环写一个100以内偶数相加"></a>go语言利用for循环写一个100以内偶数相加</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> sum <span class="hljs-type">int</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++ &#123;<br>sum = sum + i<br>&#125;<br>fmt.Println(sum)<br>&#125;<br></code></pre></td></tr></table></figure><p>go语言</p>]]></content>
    
    
    <categories>
      
      <category>go语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go语言使用for循环写一个100内相加</title>
    <link href="/2024/04/21/go-100sum/"/>
    <url>/2024/04/21/go-100sum/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="go语言使用for循环写一个100内相加"><a href="#go语言使用for循环写一个100内相加" class="headerlink" title="go语言使用for循环写一个100内相加"></a>go语言使用for循环写一个100内相加</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> sum <span class="hljs-type">int</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">1</span>; i &lt;=<span class="hljs-number">100</span> ; i++ &#123;<br>sum = sum + <span class="hljs-number">1</span><br>&#125;<br>fmt.Println(sum)<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>go语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文笔_01</title>
    <link href="/2024/04/17/wenbi-01/"/>
    <url>/2024/04/17/wenbi-01/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="文笔"><a href="#文笔" class="headerlink" title="文笔"></a>文笔</h1><p>2024&#x2F;4&#x2F;17</p><p>最该放弃的是别人的评价</p><p>走出去 别让人看低你</p><p>你是特别的 你是独一无二的</p><p>我愿意等你 直到你的出现</p><p>只有失去才会珍惜 没有拥有的永远是最好的</p><p>生理的病比不过心理的病</p><p>只要你愿意 永远也不迟</p><p>为何你如此迷茫 醒醒</p><p>不要这样了 我永远喜欢你</p><p>等你多久我都愿意</p><p>如果可以 我将和你去往我心中的海</p><p>我从远方赶来 只为一面之约</p><p>守约的是海鸥 失约的是人</p><p>我们有过过去 却各有未来</p><p>怎么让南行的人陪你向北</p><p>好好吃饭 只许想我</p><p>你停下的脚步 别人永远在前进</p><p>没有天生的恋人 只有不断靠近的两颗心</p><p>大胆一点 但愿如此</p><p>你会遇见比我有趣的人 然后把我忘记吗 -我不会</p><p>我喜欢你</p>]]></content>
    
    
    <categories>
      
      <category>文笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>午睡不要超过30min</title>
    <link href="/2024/04/17/wus-3omin/"/>
    <url>/2024/04/17/wus-3omin/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="午睡不要超过30min"><a href="#午睡不要超过30min" class="headerlink" title="午睡不要超过30min"></a>午睡不要超过30min</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为什么，其实我也是刚知道，午睡尽量不要超过30min，好了，接下来让我给大家稍微讲解一下吧</p><h2 id="午睡的好处"><a href="#午睡的好处" class="headerlink" title="午睡的好处"></a>午睡的好处</h2><p>午睡可以让一个人有充足的精力迎接下午的学习和工作，一般吃完饭后会进入午后低潮期</p><blockquote><p>午后低潮期（下午1点到4点）：午饭后，人的体温开始下降，导致许多人在这个时间段感到困倦和精力下降。这被称为“午睡现象”或“午后疲劳”。</p></blockquote><p>增强记忆力</p><p>美国哈佛大学心理学家Mednick研究发现，午睡与夜间睡眠一样，可以促进睡眠依赖的记忆。</p><p>调节情绪，改善心理状态</p><p>一项发表在《精神病学与临床神经科学》的研究发现，午睡之后，快乐、放松成分的量值得到了显著的提高。</p><p>降低心血管疾病风险</p><p>发表在《心脏》的研究发现，每周午睡1-2次的人，发生中风或者心力衰竭的风险比从来不午睡的人相比，降低了48%。 </p><p>如上所说 适量的午睡可以给我们带来很多好处</p><p>但是 如果午睡时间过长 可以会给我们的身体带来一定的坏处 </p><h2 id="午睡时间过长的坏处"><a href="#午睡时间过长的坏处" class="headerlink" title="午睡时间过长的坏处"></a>午睡时间过长的坏处</h2><p>该研究由中山大学和广州疾控中心联合完成，通过对5011名中国成年人睡眠数据进行分析发现，**熬夜和白天长时间午睡与脂肪肝风险显著相关，分别增加37%和17%**。</p><p>而在众多不健康的睡眠因素中，<strong>晚上睡不好且白天午睡超过30分钟的人患脂肪肝的风险最高</strong>，风险增加138%。而午睡小于30分钟，脂肪肝的风险将降低16%。</p><p><strong>由此可见，长时间午睡的危害不容小觑！</strong></p><p>除了脂肪肝风险，午睡时间过长，还可能诱发一系列疾病。</p><h3 id="1、增加心脏病风险"><a href="#1、增加心脏病风险" class="headerlink" title="1、增加心脏病风险"></a><strong>1、增加心脏病风险</strong></h3><p>日本东京大学的研究人员在美国心脏病学会65届年会上公布了一项研究成果：<strong>午睡时间越长，出现代谢综合征的风险就越高</strong>。</p><p>而代谢综合征主要体现为<strong>腹部肥胖、高血压、高胆固醇、高血糖</strong>等，这些都会增加心脏病风险。</p><p>a、该研究还指出了午睡时长和代谢综合征风险的相关性：</p><p>b、午睡时长＜40分钟，代谢综合征风险未见任何增长；</p><p>c、午睡时长＞40分钟，代谢综合征风险显著增加；</p><p>d、午睡90分钟，代谢综合征风险增加50%，效果如同日间过度疲劳；</p><p>e、午睡＜30分钟，代谢综合征风险略有降低。</p><h3 id="2、增加中风风险"><a href="#2、增加中风风险" class="headerlink" title="2、增加中风风险"></a><strong>2、增加中风风险</strong></h3><p>一项刊登在国际杂志Neurology上的研究显示，相比经常午睡1-30分钟的人群而言，经常性午睡持续时间超过90分钟以上的人群患中风的风险会增加25%。</p><p>这是因为，长时间午睡的个体机体中的胆固醇水平会发生不良变化，而且机体腰围也会增加，这些都是中风发生的风险因素。</p><h3 id="3、增加痴呆风险"><a href="#3、增加痴呆风险" class="headerlink" title="3、增加痴呆风险"></a><strong>3、增加痴呆风险</strong></h3><p>你可能有过这样的体验：午睡越久，醒来后脑子越糊涂。但你可能不知道，午睡时间过长不但影响睡醒后的状态，还可能增加晚年患上老年痴呆的风险。</p><p>美国加利福尼亚大学一研究表明，午睡和大脑衰老之间存在双向关系。<strong>白天过度午睡会增加晚年痴呆风险</strong>。与此同时，随着患者年龄的增长，患有阿尔茨海默氏症会导致白天午睡增加，形成恶性循环。</p><p>此外，与每天午睡小于1小时的人相比，每天至少一次1小时以上的午睡，会增加40%的痴呆风险。</p><p><strong>那么问题来了，如何午睡，才能更健康科学？</strong></p><h2 id="健康午睡，做好5点"><a href="#健康午睡，做好5点" class="headerlink" title="健康午睡，做好5点"></a>健康午睡，做好5点</h2><p>午睡虽短，却有许多讲究。只要稍加注意，养成科学的午睡习惯，不想要健康的身体都难。</p><h3 id="1、餐后半小时午睡"><a href="#1、餐后半小时午睡" class="headerlink" title="1、餐后半小时午睡"></a><strong>1、餐后半小时午睡</strong></h3><p>午餐后血液大量进入消化道，大脑供血不足，此刻困意可能会汹涌袭来，但叔并不建议你饭后立刻午睡。</p><p>正确的午睡时间应选择在午餐后半小时，此时胃内的午餐已部分排空，可缓解消化道压力，也可减少胃内食物反流至食道。</p><h3 id="2、能躺则躺，不建议趴着午睡"><a href="#2、能躺则躺，不建议趴着午睡" class="headerlink" title="2、能躺则躺，不建议趴着午睡"></a><strong>2、能躺则躺，不建议趴着午睡</strong></h3><p>如果有躺下的条件，最好平躺而睡，因为躺着可使全身关节、肌肉及消化道放松，睡眠质量也会提高。</p><p>如果实在没有，也不建议趴着午睡。趴着会压迫眼睛，短期会使睡醒后视物模糊及变形，长期会导致视力受损及青光眼等；同时容易挤压肠胃，影响消化功能，出现消化不良、肠胀气等情况。</p><p>在条件受限的情况下，可以选择头后仰的姿势坐在椅子上睡。建议佩戴环形颈椎枕，以固定入睡后头位，避免出现“落枕”和颈椎病。</p><h3 id="3、睡眠时间在15-30分钟即可"><a href="#3、睡眠时间在15-30分钟即可" class="headerlink" title="3、睡眠时间在15-30分钟即可"></a><strong>3、睡眠时间在15-30分钟即可</strong></h3><p>前面提到，午睡不宜太长，一般在15-30分钟为宜。即使只睡 15 分钟也足以缓解部分睡眠压力，因为大脑此时会进入浅层非快速动眼睡眠状态，有助于身体恢复。</p><p>此外，不必强迫自己睡着，可以把“午睡”调整为“午休”，简单眯一会儿，保证一定的休息也能获得满满能量。</p><h3 id="4、远离电子设备"><a href="#4、远离电子设备" class="headerlink" title="4、远离电子设备"></a><strong>4、远离电子设备</strong></h3><p>既然午睡时间这么短，就不要还抱着手机不放了。</p><p>首先，屏幕的光亮会影响入睡，而看手机大脑会越看越兴奋，越兴奋就越睡不着。要是没休息好，下午崩溃时可别喊后悔呐！</p><h3 id="5、午睡后可以喝一杯咖啡或者是茶提神"><a href="#5、午睡后可以喝一杯咖啡或者是茶提神" class="headerlink" title="5、午睡后可以喝一杯咖啡或者是茶提神"></a><strong>5、午睡后可以喝一杯咖啡或者是茶提神</strong></h3><p>午睡刚醒时，大脑往往还处于迟钝和半醒的状态。此时可以喝一杯咖啡或茶提神，帮助自己快速恢复精神。</p><p>总之，午睡的好坏取决于你对待午睡的态度。</p><p>无论如何，该睡觉就赶紧睡觉，该工作就按时工作。能量不会守恒，时间也不会重来。保持健康作息，才能拥有健康的身体，不要抱有侥幸心理哦。</p>]]></content>
    
    
    <categories>
      
      <category>谈天说地</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活指南</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用go语言的if..else if写一个基础登录验证</title>
    <link href="/2024/04/17/go-user-pass/"/>
    <url>/2024/04/17/go-user-pass/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="使用go语言的if-else-if写一个基础登录验证"><a href="#使用go语言的if-else-if写一个基础登录验证" class="headerlink" title="使用go语言的if..else if写一个基础登录验证"></a>使用go语言的if..else if写一个基础登录验证</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> user <span class="hljs-type">string</span><br><span class="hljs-keyword">var</span> pass <span class="hljs-type">int</span><br>fmt.Println(<span class="hljs-string">&quot;请你输入用户名：&quot;</span>)<br>fmt.Scanln(&amp;user)<br>fmt.Println(<span class="hljs-string">&quot;请你输入密码：&quot;</span>)<br>fmt.Scanln(&amp;pass)<br><br><span class="hljs-keyword">if</span> user == <span class="hljs-string">&quot;admin&quot;</span> &amp;&amp; pass == <span class="hljs-number">88888</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;账号登录成功&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> user == <span class="hljs-string">&quot;admin&quot;</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;密码错误&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> pass == <span class="hljs-number">88888</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;账号错误&quot;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;账号密码全部错误&quot;</span>)<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>go语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用php写一个验证码功能</title>
    <link href="/2024/04/17/phpyzm-jc/"/>
    <url>/2024/04/17/phpyzm-jc/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="利用php写一个验证码功能"><a href="#利用php写一个验证码功能" class="headerlink" title="利用php写一个验证码功能"></a>利用php写一个验证码功能</h1><p><img src="https://cdn.jsdelivr.net/gh/hubiaonb/img/png/20240417093140.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-comment">// 设置图片宽度和高度</span><br>    <span class="hljs-variable">$width</span> = <span class="hljs-number">100</span>;<br>    <span class="hljs-variable">$height</span> = <span class="hljs-number">30</span>;<br>    <br>    <span class="hljs-comment">// 创建一个空白的图片</span><br>    <span class="hljs-variable">$image</span> = <span class="hljs-title function_ invoke__">imagecreate</span>(<span class="hljs-variable">$width</span>, <span class="hljs-variable">$height</span>);<br>    <br>    <span class="hljs-comment">// 设置背景颜色为白色</span><br>    <span class="hljs-title function_ invoke__">imagecolorallocate</span>(<span class="hljs-variable">$image</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>);<br>    <br>    <span class="hljs-comment">// 定义字符集</span><br>    <span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890&quot;</span>;<br>    <br>    <span class="hljs-comment">// 获取字符集的长度</span><br>    <span class="hljs-variable">$strlen</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str</span>) - <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-comment">// 设置字体文件路径</span><br>    <span class="hljs-variable">$fileName</span> = <span class="hljs-title function_ invoke__">realpath</span>(<span class="hljs-string">&quot;./yzm.ttf&quot;</span>);<br>    <br>    <span class="hljs-comment">// 设置字体大小</span><br>    <span class="hljs-variable">$fontSize</span> = <span class="hljs-number">16</span>;<br>    <br>    <span class="hljs-comment">// 循环生成四个字符</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">4</span>; <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-comment">// 随机生成旋转角度</span><br>        <span class="hljs-variable">$angle</span> = <span class="hljs-title function_ invoke__">mt_rand</span>(-<span class="hljs-number">30</span>, <span class="hljs-number">30</span>);<br>        <br>        <span class="hljs-comment">// 随机生成字体颜色</span><br>        <span class="hljs-variable">$fontColor</span> = <span class="hljs-title function_ invoke__">imagecolorallocate</span>(<span class="hljs-variable">$image</span>, <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">100</span>, <span class="hljs-number">180</span>), <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">100</span>, <span class="hljs-number">180</span>), <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">100</span>, <span class="hljs-number">180</span>));<br>        <br>        <span class="hljs-comment">// 从字符集中随机选择一个字符</span><br>        <span class="hljs-variable">$text</span> = <span class="hljs-variable">$str</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>, <span class="hljs-variable">$strlen</span>)];<br>        <br>        <span class="hljs-comment">// 在图片上绘制字符</span><br>        <span class="hljs-title function_ invoke__">imagettftext</span>(<span class="hljs-variable">$image</span>, <span class="hljs-variable">$fontSize</span>, <span class="hljs-variable">$angle</span>, <span class="hljs-number">20</span> + (<span class="hljs-variable">$i</span> * <span class="hljs-number">15</span>), <span class="hljs-number">20</span>, <span class="hljs-variable">$fontColor</span>, <span class="hljs-variable">$fileName</span>, <span class="hljs-variable">$text</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 添加干扰线</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">5</span>; <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-comment">// 随机生成线条颜色</span><br>        <span class="hljs-variable">$lineColor</span> = <span class="hljs-title function_ invoke__">imagecolorallocate</span>(<span class="hljs-variable">$image</span>, <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">100</span>, <span class="hljs-number">180</span>), <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">100</span>, <span class="hljs-number">180</span>), <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">100</span>, <span class="hljs-number">180</span>));<br>        <br>        <span class="hljs-comment">// 随机生成线条的起点坐标</span><br>        <span class="hljs-variable">$startX</span> = <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>, <span class="hljs-variable">$width</span>);<br>        <span class="hljs-variable">$startY</span> = <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>, <span class="hljs-variable">$height</span>);<br>        <br>        <span class="hljs-comment">// 随机生成线条的终点坐标</span><br>        <span class="hljs-variable">$endX</span> = <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>, <span class="hljs-variable">$width</span>);<br>        <span class="hljs-variable">$endY</span> = <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>, <span class="hljs-variable">$height</span>);<br>        <br>        <span class="hljs-comment">// 在图片上绘制线条</span><br>        <span class="hljs-title function_ invoke__">imageline</span>(<span class="hljs-variable">$image</span>, <span class="hljs-variable">$startX</span>, <span class="hljs-variable">$startY</span>, <span class="hljs-variable">$endX</span>, <span class="hljs-variable">$endY</span>, <span class="hljs-variable">$lineColor</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 设置响应头，指定输出的内容类型为PNG图片</span><br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type: image/png&quot;</span>);<br>    <br>    <span class="hljs-comment">// 输出图片</span><br>    <span class="hljs-title function_ invoke__">imagepng</span>(<span class="hljs-variable">$image</span>);<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>php基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php基础</tag>
      
      <tag>php验证码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多巴胺和内啡肽的秘密</title>
    <link href="/2024/04/16/duobaan-dsp/"/>
    <url>/2024/04/16/duobaan-dsp/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="多巴胺和内啡肽的秘密"><a href="#多巴胺和内啡肽的秘密" class="headerlink" title="多巴胺和内啡肽的秘密"></a>多巴胺和内啡肽的秘密</h1><p>hi 我是Master</p><p>现在是2024年 我前天刚过完16岁的生日</p><p>至于我为什么想写这一篇文章 大概是我目前没有前进的动力</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在这个社会，人人都很聪明，但是这个聪明到底是靠什么来决定的</p><p>我认为是通过大脑的思考，想的越多越聪明，控制一个人思考的是什么因素，无非就那几点，环境，知识，而环境包括“个人环境“与“家庭环境“，知识就是自己来了这个世界通过各种方法学习到的</p><p>如果真的是这样 我希望你可以看完我这篇文章</p><h2 id="多巴胺"><a href="#多巴胺" class="headerlink" title="多巴胺"></a>多巴胺</h2><p>多巴胺是什么 ，我只知道多巴胺很恐怖，可以让一个人快乐或堕落</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>接下来 给大家放一段专业解释</p><blockquote><p>多巴胺是内源性含氮有机化合物（英文名为：dopamine，该单词的来源为3，4-dihydroxyphenethylamine）或称2-(3，4-二羟基苯基)乙胺，简称DA，又名儿茶酚乙胺或羟酪胺，为酪氨酸（芳香族氨基酸）在代谢过程中经二羟苯丙氨酸所产生的中间产物。是儿茶酚胺类的一种，分子式为C8H11NO2。</p><p>最早是在1910年由乔治·巴格和詹姆斯·尤恩在英国伦敦惠康实验室合成 [1]，之后于1957年由凯瑟琳·蒙塔古首次在人脑中鉴定出来。因为它是L-多巴合成出来的单胺，所以被命名为多巴胺。1958年，阿尔维德·卡尔森和尼尔斯-奥克·希拉普在瑞典国家心脏研究所化学药理学实验室中最早认识到多巴胺作为神经递质在调控中枢神经系统方面具有多种生理功能 [2]。</p><p>具体作用方式为多巴胺由神经元释放出来，将信号发送到其它神经细胞，用来帮助细胞传送脉冲信号。多巴胺系统调节障碍涉及帕金森病，精神分裂症，Tourette综合症，注意力缺陷多动综合症和垂体肿瘤的发生等 [3]。瑞典加特伯格大学药理学教授阿尔维德·卡尔森（Arvid Carlsson）发现多巴胺不仅是去甲肾上腺素和肾上腺素的前体，自身也是一种神经递质，因此被授予2000年诺贝尔生理学或医学奖。</p><p> 民众普遍认为多巴胺是使人快乐的物质，但目前的药理学研究认为多巴胺其实是在增强动机强度。</p><p>更为通俗的表达为，多巴胺表示对某个结果的欲望或厌恶，推动人去实现它，或是避免它实现。</p></blockquote><p>我为什么说它很恐怖 如图</p><p><img src="https://cdn.jsdelivr.xyz/gh/hubiaonb/img/png/20240416165445.png"></p><p>当你有特别强烈的欲望去完成某件事情、做出某种行为时，你的大脑就会分泌大量多巴胺，驱使你继续追求欲望，并在这个过程中带来快乐和满足。(有可能带来的不是真正的快乐和满足)</p><p>由于我知识有限 我会用我自己的的理解来向大家说明</p><h3 id="站在科技视角看待"><a href="#站在科技视角看待" class="headerlink" title="站在科技视角看待"></a>站在科技视角看待</h3><h4 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h4><p>科技逐渐发达，出现大数据这一名词，大数据是什么？本质就是大量收集数据，分析，模拟，以此类推，我来举一个例子，手机的人脸识别解锁，其实用的就是大数据的产物，通过收集大量人类面部素材，分类，整理，开始分析人的表情，样貌，通过先进的机器学习，最后生成一个人脸识别模型，内置到手机系统中，用户拿到手机录入自己的人脸，这个数据就会使用训练好的模型进行分析，接下来当用户使用面部解锁时，系统将自动比对提前录好的数据，因为分析你的数据，当你做出不同表情，依然可以解锁，如果发现对比不上将不进行解锁</p><p>大数据也是人工智能的基础</p><p>现在的GPT , 讯飞星火都是大数据的产物</p><p>有一些不懂的 我也会请教这些大数据模型</p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>抖音和快手 大家肯定都听过吧</p><p>当下最流行的短视频平台</p><p>你们用完这类软件 有没有发现有时会突然失落</p><p>以及你在这类软件中获取到多少有用的知识，你别急的提出你的观点，说这些本身就是一个娱乐的软件，那我真的就笑笑，你见过国家去使用一个娱乐软件宣传一些大事吗.</p><p>这些平台对青少年的影响有多大，你看看身边的就发现了，性早熟，盲目更风，平台上的错误价值观，一些软色情，男性娘化，一步一步出现，全球如此。</p><p>其实过多的我也不说了</p><p>一句话少看 得控制</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>多巴胺是一种神经传递物质，它负责帮大脑传递兴奋及开心的信息，当人被外界刺激到愉悦时，多巴胺会大量爆发出来， 从而让我们产生“快感”。这被认为是一种奖励机制，大脑产生快感之后，人体会趋向于下次还能再做这种行为。所以成瘾性跟多巴胺有密切关系，一旦抽烟、酗酒、手淫等行为与多巴胺的分泌产生关联，人类就有可能对这些行为成瘾，形成不良嗜好，进而影响人体健康。 因为人产生快感的阈值是会不断升高的，一个人要想一直获得快感，就得不断加强刺激，才能持续获得快感，时间长了自然会对人体产生危害。用一句话来总结：“多巴胺让人越快乐，越堕落”。</p><h2 id="内啡肽"><a href="#内啡肽" class="headerlink" title="内啡肽"></a>内啡肽</h2><p>能让人成瘾的除了多巴胺还有内啡肽，而更多情况下让人成瘾的是多巴胺。</p><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>内啡肽又称安多芬或脑内啡，是垂体分泌生物合成激素，可以和受体结合，产生天然止痛剂，缓解疼痛感和产生愉悦感。内啡肽的作用机制是一种补偿机制，比如身体经历了巨大的创伤后，大脑分泌内啡肽，可以让人体减轻疼痛感。这种保护机制也可以让人体产生快感，类似于痛苦之后的补偿作用，用一句话总结：“内啡肽让人痛并快乐着。”</p><p>大脑垂体分泌内啡肽使人体在感到很痛苦的同时也会感到很爽，于是下次会想再次重复这种行为，同样会有一定的成瘾性。  举个生活中的例子，辣味会在舌头上制造痛苦的感觉，为了平衡这种痛苦，人体会分泌内啡肽，消除舌上痛苦的同时，在人体内制造了类似于快乐的感觉，而我们把这种感觉误认为来自辣味本身，所以，很多人喜欢吃辣，所谓“一辣解三馋”。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>科学家发现多巴胺快乐和内啡肽快乐之间存在着重要的区别，多巴胺的产生靠刺激和奖赏，是外界驱动，而内啡肽的产生主要靠的是心血和汗水，是学习、运动、跑步等内在驱动。</p><p>多巴胺快乐是短暂的，需要不断的刺激来维持；而内啡肽快乐是由人类自己的行为引起的，更加深刻和持久。多巴胺快乐容易让人上瘾，而内啡肽快乐让人上瘾相对来讲却很难。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>多巴胺让你明白，凡是让你感到爽的东西，也会给你带来痛苦和灾难，有点像乐极生悲；而内啡肽让你明白，凡是让你痛苦的，最终也也会让你收获更多美好，有些像苦尽甘来。 但凡事都有度，过度追求内啡肽的快乐，会让人处于亢奋的情绪之中，较短的时间里无法恢复，可能会导致失眠，这也是不良的生理病症，极个别情况下还会导致一些人有自残倾向。我们可以利用闲暇的时间，多学习一些心理的知识，这样能够有效的控制自己的行为举止以及心理情绪变化，使得内啡肽分泌向正能量的方向发展。</p>]]></content>
    
    
    <categories>
      
      <category>谈天说地</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多巴胺</tag>
      
      <tag>内啡肽</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Hexo和GitHub搭建博客</title>
    <link href="/2024/04/16/hexo-github/"/>
    <url>/2024/04/16/hexo-github/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="基于Hexo和GitHub搭建博客"><a href="#基于Hexo和GitHub搭建博客" class="headerlink" title="基于Hexo和GitHub搭建博客"></a>基于Hexo和GitHub搭建博客</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>hi 我是Master<br>这篇文章教大家如何使用Hexo和Github免服务器搭建一个属于自己2024年的永久博客</p><p>ps: 本教程为2024全新利用Hexo与GitHub搭建博客教程</p><p>废话不多说开始教程</p><p>由于本站图片使用的是GitHub的图床 可能会抽风</p><p>出现不加载图片 重新刷新即可 多来几遍</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>Hexo 是一个静态页面生成框架</p><p>GitHub 这个我不用过多介绍吧 大家毕竟都是了解过的</p><p>这次我们要使用GitHub的一个功能就是 GitHub Pages</p><p>GitHub 是有名的代码托管网站，而它提供了一项服务 GitHub Pages，这个 GitHub Pages 可以将我们托管在 GitHub 上的一个仓库中的 html、css 和 js 代码渲染成静态页面。当然，这个仓库是特殊的，所以每一个 GitHub 账户只能够育一个这样的仓库。将相应的博客内容上传到 GitHub 上之后，我们就可以通过 <code>https://username.github.io</code> 来访问自己的博客，这里的 <code>username</code> 要换成自己的用户名。比如，我的用户名是 <code>hubiaonb，那么就可以通过 </code><a href="https://hubiaonb.github.io/">https://hubiaonb.github.io</a> 来访问我的博客。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>由于GitHub官网对于国人来说有点神经</p><p>有时不需要使用 科学就可以正常打开 有时必须使用科学</p><p>所以推荐大家准备一个科学  搭建好的博客不会出现这个情况 只是官网会这样</p><h3 id="注册GitHub"><a href="#注册GitHub" class="headerlink" title="注册GitHub"></a>注册GitHub</h3><p>访问<a href="https://so.csdn.net/so/search?q=GitHub&spm=1001.2101.3001.7020">GitHub</a>官网：(<a href="https://github.com/">https://github.com/</a> )<br>点击<code>Sign up</code> 按钮</p><p><img src="https://cdn.jsdelivr.xyz/gh/hubiaonb/img/png/20240416124200.png"></p><p>填写用户名、密码、邮箱，然后点击<code>Create account</code>。</p><p><img src="https://cdn.jsdelivr.xyz/gh/hubiaonb/img/png/20240416124458.png"></p><p>选择感兴趣的功能，我这里全部选上了，然后点击<code>Continue</code>。</p><p><img src="https://cdn.jsdelivr.xyz/gh/hubiaonb/img/png/20240416124534.png"></p><p>这里要选择免费服务还是企业付费服务，对于个人开发者来说免费的就够了，我这里选择免费的，点击<code>Continue for free</code>。</p><p><img src="https://cdn.jsdelivr.xyz/gh/hubiaonb/img/png/20240416124620.png"></p><p>创建组织，填写组织名、邮箱等信息，然后点击<code>Next</code>。</p><p><img src="https://cdn.jsdelivr.xyz/gh/hubiaonb/img/png/20240416124704.png"></p><p>可以邀请其他成员，不邀请的话直接点击<code>Complete setup</code>。</p><p><img src="https://cdn.jsdelivr.xyz/gh/hubiaonb/img/png/20240416124741.png"></p><p>这个页面是一个类似问卷的调查页面，随便填下就好，然后点击<code>Submit</code>提交。</p><p><img src="https://cdn.jsdelivr.xyz/gh/hubiaonb/img/png/20240416124820.png"></p><p>注册账号的流程到这里就完成了。</p><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><h4 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h4><p>官网下载页面：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p>我选择的是Win 64位的安装版本，地址：<a href="https://github.com/git-for-windows/git/releases/download/v2.32.0.windows.2/Git-2.32.0.2-64-bit.exe">https://github.com/git-for-windows/git/releases/download/v2.32.0.windows.2/Git-2.32.0.2-64-bit.exe</a></p><p>下载得到安装包 Git-2.32.0.2-64-bit.exe</p><h4 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h4><p>双击安装包开始安装，一路点击 Next 即可，安装完成后鼠标右键会有 Git Bash Here，这是Git的命令行，说明安装成功</p><p><img src="https://cdn.jsdelivr.xyz/gh/hubiaonb/img/png/20240416125332.png"></p><p><img src="https://cdn.jsdelivr.xyz/gh/hubiaonb/img/png/20240416125447.png"></p><h4 id="3-设置用户名和邮箱"><a href="#3-设置用户名和邮箱" class="headerlink" title="3.设置用户名和邮箱"></a>3.设置用户名和邮箱</h4><p>因为 Git 是分布式版本控制系统，所以需要设置用户名和邮箱作为一个标识，在命令行输入如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;user_name&quot;</span> <span class="hljs-comment"># user_name 填入 GitHub 用户名</span><br>git config --global user.email <span class="hljs-string">&quot;user_email&quot;</span> <span class="hljs-comment"># user_email 填入 GitHub 注册的邮箱</span><br></code></pre></td></tr></table></figure><h3 id="安装-VSCode"><a href="#安装-VSCode" class="headerlink" title="安装 VSCode"></a>安装 VSCode</h3><p>VSCode 是一个非常好用的文本编辑器，之后编辑博客的相关配置文件以及后面的写博客都需要用到这个编辑器。</p><p>安装过程很简单，直接进入 <a href="https://code.visualstudio.com/">VSCode 官网</a>，然后安装的时候建议所有步骤都直接点下一步</p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>进入 <a href="https://nodejs.org/en/">Node 官网</a> 下载最新稳定版本，</p><p><img src="https://cdn.jsdelivr.xyz/gh/hubiaonb/img/png/20240416130009.png"></p><p>然后安装的时候建议直接全部点击下一步（如果 C 盘不吃紧的话），然后勾选所有组件，并勾选 <code>Add to Path</code> 将其添加到系统环境变量。</p><p>安装 Node.js 会包含环境变量以及 npm 的安装，安装后，可以在命令行输入如下命令检测 Node.js 是否安装成功：</p><p>第一个命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">node -v<br></code></pre></td></tr></table></figure><p>这个命令，在 nodejs 安装成功的情况下会显示 nodejs 的版本号。</p><p>第二个命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm -v<br></code></pre></td></tr></table></figure><p>这个命令，在 nodejs 安装成功的情况下会显示 npm 的版本号。</p><h3 id="换npm源"><a href="#换npm源" class="headerlink" title="换npm源"></a>换npm源</h3><p>npm是node.js自带的一个工具</p><p>为什么要换源 因为自带的我们国内无法正常使用</p><p>这一点有好多人没讲 我也是看着别人的教程搭建的</p><p>真的很坑 所以我给大家讲一下</p><p>下面我介绍下如何使用淘宝镜像源。</p><h4 id="1-打开git"><a href="#1-打开git" class="headerlink" title="1.打开git"></a>1.打开git</h4><p><img src="https://cdn.jsdelivr.xyz/gh/hubiaonb/img/png/20240416125447.png"></p><h4 id="2-命令设置"><a href="#2-命令设置" class="headerlink" title="2.命令设置"></a>2.命令设置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bush">#最新地址 淘宝 NPM 镜像站喊你切换新域名啦!<br>npm config set registry https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><h4 id="3-查看镜像使用状态"><a href="#3-查看镜像使用状态" class="headerlink" title="3.查看镜像使用状态"></a>3.查看镜像使用状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config get registr<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.xyz/gh/hubiaonb/img/png/20240416130846.png"></p><p>ps:这张图偷来的 哈哈哈啊</p><p>如果返回<a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a>，说明配置成功。</p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>登录 GitHub 账号，新建一个名为 <code>username.github.io</code>（这里的 username 要替换成自己的实际的用户名） 的仓库，如下图<br> <img src="https://cdn.jsdelivr.xyz/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016165332.png" alt="img"></p><p>点击<code>New</code>按钮，进入仓库创建页面。</p><p>填写仓库名，格式必须为<code>&lt;用户名&gt;.github.io</code>，然后点击<code>Create repository</code>。</p><p><img src="https://cdn.jsdelivr.xyz/gh/hubiaonb/img/png/5b7236589dc8430d8b96c512e0989b23.png"></p><h2 id="配置-SSH-key"><a href="#配置-SSH-key" class="headerlink" title="配置 SSH key"></a>配置 SSH key</h2><p>为什么要配置这个 因为我们首先要本地架构Hexo框架</p><p>写好博客 编译成html页面 上传到GitHub仓库</p><p>从本地链接GitHub要使用git这个工具、</p><p>而这些操作得有账号的所有权</p><p>有两种可以取得权限的方法</p><p>~~  通过Personal access tokens 就是GitHub的密钥 </p><p>还有就是本文这种 本文这种方法强力推荐 太好用了</p><p>打开 Git Bash，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;user.email&quot;</span> <span class="hljs-comment"># user.email 为GitHub 上注册的邮箱</span><br></code></pre></td></tr></table></figure><p>然后直接三个回车即可，默认不需要设置密码。查看是否已经有 ssh 密钥。打开用户主目录 <code>C:\Users\username\.ssh</code>，.ssh文件夹一定存放在C:，至于后面的路径lenovo这个不一定每台电脑都相同。找到.ssh文件夹，打开如下：</p><p><a href="https://cdn.jsdelivr.xyz/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016172151.png"><img src="https://cdn.jsdelivr.xyz/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016172151.png" alt="img"></a></p><p>然后找到生成的 <code>.ssh</code> 的文件夹中的 <code>id_rsa.pub</code> 密钥，将内容全部复制。其中 <code>id_rsa</code> 是私钥不能泄露，<code>id_rsa.pub</code> 是公钥可以放心告诉他人。</p><p>打开 <a href="https://github.com/settings/ssh/new">GitHub SSH and GPG keys</a> 页面，新建一个 ssh key：</p><p><a href="https://cdn.jsdelivr.xyz/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016172518.png"><img src="https://cdn.jsdelivr.xyz/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016172518.png" alt="img"></a></p><p><code>Title</code> 为标题，任意填即可，将刚刚复制的 <code>id_rsa.pub</code> 内容粘贴进去，最后点击 <code>Add SSH key</code>。在 <code>Git Bash</code> 中检测 <code>GitHub</code> 公钥设置是否成功，输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>验证是否连接成功，连接成功的话，显示如下：</p><p><a href="https://cdn.jsdelivr.xyz/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016172942.png"><img src="https://cdn.jsdelivr.xyz/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016172942.png" alt="img"></a></p><h2 id="部署Hexo"><a href="#部署Hexo" class="headerlink" title="部署Hexo"></a>部署Hexo</h2><p>Hexo 官方文档：<a href="https://hexo.io/docs/">https://hexo.io/docs/</a></p><h3 id="Hexo-是什么"><a href="#Hexo-是什么" class="headerlink" title="Hexo 是什么"></a>Hexo 是什么</h3><p><code>Hexo</code> 是一个简单、快速、强大的基于 <code>Github Pages</code> 的博客框架，支持 <code>Markdown</code> 格式，有众多优秀插件和主题。</p><h3 id="Hexo-原理"><a href="#Hexo-原理" class="headerlink" title="Hexo 原理"></a>Hexo 原理</h3><p>由于 <code>Github Pages</code> 存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以 <code>Hexo</code> 所做的就是将这些 <code>md</code> 文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到 <code>GitHub</code> 。</p><h3 id="安装与初始化"><a href="#安装与初始化" class="headerlink" title="安装与初始化"></a>安装与初始化</h3><p>在 <code>Git Bash</code> 中输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli <span class="hljs-comment"># 此命令完成对 hexo 的安装</span><br></code></pre></td></tr></table></figure><p>安装完成后，在电脑的某个地方新建一个文件夹（名字可以随便取）专门用于存放博客代码，比如我的是 <code>D:\Blogs</code>，由于这个文件夹将来存放博客的所有内容和素材，以及所有的博客操作都会在其中完成，所以最好不要随便放。</p><p>进入新建的博客目录，输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init <span class="hljs-comment"># 该命令完成 hexo 在本地博客目录的初始化</span><br></code></pre></td></tr></table></figure><p><a href="https://cdn.jsdelivr.xyz/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016174011.png"><img src="https://cdn.jsdelivr.xyz/gh/fanlumaster/BlogMaps@master/blogs/pictures/20211016174011.png" alt="img"></a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><p>在 <code>Git Bash</code> 中输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g <span class="hljs-comment"># 生成静态文件</span><br></code></pre></td></tr></table></figure><p>执行以上命令后，Hexo 就会在 <code>public</code> 文件夹中生成相关的 <code>html</code> 文件，这些文件将来都是要提交到 <code>GitHub</code> 上的 <code>username.github.io</code> 的仓库中去的。</p><h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><p>在 <code>Git Bash</code> 输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s <span class="hljs-comment"># 开启本地预览</span><br></code></pre></td></tr></table></figure><p><code>hexo s</code> 是开启本地预览服务，打开浏览器访问 <code>http://localhost:4000</code> 即可看到内容，<code>Ctrl+C</code> 停止本地预览。本地预览可以实时查看博客的编辑情况，待博客写完后一起部署到 <code>GitHub</code> 上。</p><p>第一次初始化的时候 <code>hexo</code> 已经帮我们写了一篇名为 Hello World 的文章，<strong>默认的主题比较丑</strong></p><h2 id="推送到GitHub"><a href="#推送到GitHub" class="headerlink" title="推送到GitHub"></a>推送到GitHub</h2><h4 id="配置站点配置文件"><a href="#配置站点配置文件" class="headerlink" title="配置站点配置文件"></a>配置站点配置文件</h4><p><code>hexo</code> 有 2 种 <code>_config.yml</code> 文件，一个是根目录下的全局的 <code>_config.yml</code>，一个是各个主体 <code>theme</code> 下的 <code>_config.yml</code>。将前者称为站点配置文件， 后者称为主题配置文件。</p><p>打开根目录下站点配置文件 <code>_config.yml</code>，配置有关 <code>deploy</code> 的部分：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:fanlumaster/你的用户名.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>在 <code>Git Bash</code> 中输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save <span class="hljs-comment"># 安装部署插件</span><br></code></pre></td></tr></table></figure><p>如果不进行上述操作，直接使用 <code>hexo d</code> 部署到 <code>GitHub</code>，将会报错。</p><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global core.safecrlf <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>参考：<a href="https://stackoverflow.com/questions/5834014/lf-will-be-replaced-by-crlf-in-git-what-is-that-and-is-it-important">stackoverflow</a></p><p>这个必须执行 不然使用推送必报错</p><h4 id="部署到-GitHub"><a href="#部署到-GitHub" class="headerlink" title="部署到 GitHub"></a>部署到 GitHub</h4><p>在 <code>Git Bash</code> 中输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d<br></code></pre></td></tr></table></figure><p>部署成功后，打开对应的网址 <code>https://username.github.io</code>，如果出现了和本地预览一样的效果，那么，表明部署成功。</p><p>对了 并不需要自己手动开启 GitHub Pages</p><p>如果你推送成功 就可以直接打开啦</p><p>你想来了解的话 自行百度一下吧 打字有点累</p><h2 id="完事"><a href="#完事" class="headerlink" title="完事"></a>完事</h2><p>此文章已更新完毕 模板以及发布文章等我有时间更新</p><p>ps：推荐自行百度  配合我的教程搭建即可</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php基础</title>
    <link href="/2024/04/16/php%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/04/16/php%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="php基础"><a href="#php基础" class="headerlink" title="php基础"></a>php基础</h1><h2 id="PHP-语法"><a href="#PHP-语法" class="headerlink" title="PHP 语法"></a>PHP 语法</h2><h3 id="基本的php语法"><a href="#基本的php语法" class="headerlink" title="基本的php语法"></a>基本的php语法</h3><p>php脚本可以放在文档中的任何地方</p><p>php脚本以<? php 开始 ，以?>结束；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span> php<br><span class="hljs-comment">// php代码</span><br>？&gt;<br></code></pre></td></tr></table></figure><p>php文件的默认文件扩展名是.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;body&gt;<br><br>&lt;h1&gt;My first PHP page&lt;/h1&gt;<br><br>&lt;?php<br>echo &quot;Hello World!&quot;;<br>?&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="php中的注释"><a href="#php中的注释" class="headerlink" title="php中的注释"></a>php中的注释</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;body&gt;<br>&lt;?php<br>// 这是 PHP 单行注释<br>/*<br>这是 <br>PHP 多行<br>注释<br>*/<br>?&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="php变量"><a href="#php变量" class="headerlink" title="php变量"></a>php变量</h2><p>变量是用于存储信息的容器；</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$x</span>=<span class="hljs-number">5</span>;<br><span class="hljs-variable">$y</span>=<span class="hljs-number">6</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$z</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$y</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="与代数类似"><a href="#与代数类似" class="headerlink" title="与代数类似"></a>与代数类似</h3><p>x &#x3D; 5</p><p>y &#x3D; 6</p><p>z &#x3D; x+y</p><p>上面代码中意思就是</p><p>将整数5赋值给x 整数6赋值给y</p><p>那么 z(11) &#x3D; x(5)+y(6)</p><p>z 的 值就是11</p><p>在php中，这些字母称为变量 .</p><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.12/dist/gdemo.min.css"><link rel="stylesheet" href="//cdn.jsdelivr.net/npm/prismjs/themes/prism-tomorrow.css"><script src="//cdn.jsdelivr.net/npm/@glorious/demo@0.11.12/dist/gdemo.min.js"></script><div id='demo-teriminal' style='height: 250px'></div><script>new GDemo('#demo-teriminal')  .openApp('terminal', {minHeight: '250px', windowTitle: 'php', promptString: '$'})  .command(`<span class="token operator">&lt;</span><span class="token operator">?</span>php`, {onCompleteDelay: 500})  .command(` x <span class="token operator">=</span><span class="token number">5</span> `, {onCompleteDelay: 500})  .command(` y <span class="token operator">=</span> <span class="token number">6</span> `, {onCompleteDelay: 500})  .command(` z <span class="token operator">=</span> x<span class="token operator">+</span>y`, {onCompleteDelay: 500})  .command(` ehco z`, {onCompleteDelay: 500})  .command(` <span class="token number">11</span>`, {onCompleteDelay: 500})  .respond(``)  .end();</script><p>PHP 变量规则：</p><ul><li>变量以 $ 符号开始，后面跟着变量的名称</li><li>变量名必须以字母或者下划线字符开始</li><li>变量名只能包含字母、数字以及下划线（A-z、0-9 和 _ ）</li><li>变量名不能包含空格</li><li>变量名是区分大小写的（$y 和 $Y 是两个不同的变量）</li></ul><h3 id="局部和全局作用域"><a href="#局部和全局作用域" class="headerlink" title="局部和全局作用域"></a>局部和全局作用域</h3><p>在所有函数外部定义的变量，拥有全局作用域。除了函数外，全局变量可以被脚本中的任何部分访问，要在一个函数中访问一个全局变量，需要使用 global 关键字。</p><p>在 PHP 函数内部声明的变量是局部变量，仅能在函数内部访问：</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$x</span>=<span class="hljs-number">5</span>; <span class="hljs-comment">// 全局变量</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myTest</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-variable">$y</span>=<span class="hljs-number">10</span>; <span class="hljs-comment">// 局部变量</span><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;测试函数内变量:&lt;p&gt;&quot;</span>;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;变量 x 为: <span class="hljs-subst">$x</span>&quot;</span>;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;变量 y 为: <span class="hljs-subst">$y</span>&quot;</span>;<br>&#125; <br><br><span class="hljs-title function_ invoke__">myTest</span>();<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;测试函数外变量:&lt;p&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;变量 x 为: <span class="hljs-subst">$x</span>&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;变量 y 为: <span class="hljs-subst">$y</span>&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在以上实例中 myTest() 函数定义了 $x 和 $y 变量。 $x 变量在函数外声明，所以它是全局变量 ， $y 变量在函数内声明所以它是局部变量。</p><p>当我们调用myTest()函数并输出两个变量的值, 函数将会输出局部变量 $y 的值，但是不能输出 $x 的值，因为 $x 变量在函数外定义，无法在函数内使用，如果要在一个函数中访问一个全局变量，需要使用 global 关键字。</p><p>然后我们在myTest()函数外输出两个变量的值，函数将会输出全局变量 $x 的值，但是不能输出 $y 的值，因为 $y 变量在函数中定义，属于局部变量。</p>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go语言基础</title>
    <link href="/2024/04/15/go-basic/"/>
    <url>/2024/04/15/go-basic/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="go语言基础"><a href="#go语言基础" class="headerlink" title="go语言基础"></a>go语言基础</h1><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><ul><li>float64(一般用这个)</li><li>float32</li></ul><h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h4><ul><li>bool</li></ul><h4 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h4><ul><li>byte</li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ul><li>string</li><li>一个汉字占3个字符</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>在程序运行中，可以改变的值</li><li>var 变量名 类型(可以省略) &#x3D; 值</li><li>便捷方式 变量名: &#x3D; 值</li></ul><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ul><li>在程序运行中，不可以改变的值</li><li>const 常量名 类型(可以省略) &#x3D; 值</li><li>建议常量名一般大写</li><li>不允许打印常量地址</li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><p><img src="https://raw.githubusercontent.com/hubiaonb/img/main/png/20240415191119.png"></p><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p><img src="https://raw.githubusercontent.com/hubiaonb/img/main/png/20240415191217.png"></p><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><p><img src="https://raw.githubusercontent.com/hubiaonb/img/main/png/20240415191246.png"></p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><ul><li>常用逻辑运算符</li></ul><p>  <img src="https://raw.githubusercontent.com/hubiaonb/img/main/png/20240415191315.png"></p><ul><li><p>单目运算符和双目运算符</p><p><img src="https://raw.githubusercontent.com/hubiaonb/img/main/png/20240415191343.png"></p></li></ul><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><ul><li><p>类型转换用于将一种数据类型的变量转换为另一种类型的变量</p></li><li><p>建议低数据类型转高类型<br>保留类型精度</p></li><li><p>例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> num <span class="hljs-type">float64</span> = <span class="hljs-number">3.15</span><br>fmt.Printf(<span class="hljs-string">&quot;%d&quot;</span>,<span class="hljs-type">int</span>(num))<br></code></pre></td></tr></table></figure></li></ul><h3 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h3><ul><li><h4 id="Print"><a href="#Print" class="headerlink" title="Print"></a>Print</h4><ul><li>标识符<ul><li>%d 整数</li><li>%f 小数</li><li>%p 地址</li><li>%s 字符串</li><li>%T 查看类型</li><li>%c 字符</li></ul></li></ul></li><li><h4 id="Println"><a href="#Println" class="headerlink" title="Println"></a>Println</h4><p>len()函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(<span class="hljs-built_in">len</span>(变量))<br></code></pre></td></tr></table></figure><p>其作用是用于计算数组(包括数组指针)、切片(slice)、map、channel、字符串等数据类型的长度，注意，结构休(struct)、整型布尔等不能作为参数传给len函数。</p></li></ul><h3 id="分支判断"><a href="#分支判断" class="headerlink" title="分支判断"></a>分支判断</h3><h4 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> 判断&#123;<br>执行代码<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="if-else判断"><a href="#if-else判断" class="headerlink" title="if-else判断"></a>if-else判断</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> 判断&#123;<br>执行代码<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>执行代码<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="if-else-if结构"><a href="#if-else-if结构" class="headerlink" title="if-else-if结构"></a>if-else-if结构</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> 判断&#123;<br>    执行代码<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> 判断&#123;<br>    执行代码<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    执行代码<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>go语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你好！！</title>
    <link href="/2024/04/15/%E4%BD%A0%E5%A5%BD%EF%BC%81%EF%BC%81/"/>
    <url>/2024/04/15/%E4%BD%A0%E5%A5%BD%EF%BC%81%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="hi-欢迎来到我的blog"><a href="#hi-欢迎来到我的blog" class="headerlink" title="hi 欢迎来到我的blog"></a>hi 欢迎来到我的blog</h2><ul><li><p>介绍</p><ul><li><p>网名：Master</p></li><li><p>技术栈：</p><ul><li><p>go</p></li><li><p>java</p></li><li><p>vue</p></li><li><p>uniapp</p></li></ul></li></ul></li><li><p>本站点使用 <strong>GitHub</strong> 和 <strong>Hexo</strong> 强力驱动</p></li><li><p>欢迎转载</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>介绍</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
